from datetime import datetime
import pytz
import sqlite3
from aiogram import types
from aiogram import F
from aiogram.filters import Command
from loguru import logger

from bot.config import config
from services.llm_service import LLMClient


# -----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------
def now_timestamps(timezone: str | None = None) -> tuple[str, str]:
    tz = timezone or config.timezone
    utc_dt = datetime.utcnow().replace(tzinfo=pytz.utc)
    local_dt = utc_dt.astimezone(pytz.timezone(tz))
    return utc_dt.isoformat(), local_dt.isoformat()


async def try_flush_queue(queue, gsheet_client):
    while True:
        item = queue.pop()
        if not item:
            break
        id_ = item["id"]
        payload = item["payload"]
        try:
            gsheet_client.append_row(payload)
            queue.mark_done(id_)
            logger.info(f"Flushed queued item {id_}")
        except Exception:
            logger.exception("Failed to flush queued item")
            queue.mark_failed(id_)
            break


# -----------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
# -----------------------------
def register_handlers(dp, auth, queue, gsheet_client):
    llm_client = LLMClient()

    @dp.message(F.text & ~F.text.startswith("/"))
    async def handle_message(message: types.Message):
        user = message.from_user
        username = user.username or ""
        user_id = user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not auth.is_allowed(user_id, username):
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∑–∞ –ø—Ä–æ–µ–∫—Ç.")
            logger.info(f"Unauthorized message from {user_id} / {username}")
            return

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not message.text:
            await message.answer("–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ö–æ–¥—É —Ä–∞–±–æ—Ç.")
            return

        ts_utc, ts_local = now_timestamps(config.timezone)

        # -----------------------------
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ llm_client
        # -----------------------------
        try:
            parsed = llm_client.parse_message(message.text)
            logger.info(f"llm_client parsed: {parsed}")
        except Exception as e:
            logger.exception("llm_client parsing failed")
            parsed = {"–í–∏–¥ —Ä–∞–±–æ—Ç": "", "–û–±—ä–µ–º": "", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": message.text}

        # -----------------------------
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
        # -----------------------------
        payload = {
            "timestamp_utc": ts_utc,
            "timestamp_local": ts_local,
            "telegram_user_id": user_id,
            "telegram_username": username,
            "message_text": message.text,
            "record_status": "queued",
            "work_type": parsed.get("–í–∏–¥ —Ä–∞–±–æ—Ç", ""),
            "volume": parsed.get("–û–±—ä–µ–º", ""),
            "comment": parsed.get("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", ""),
        }

        # -----------------------------
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ Google Sheets
        # -----------------------------
        try:
            gsheet_client.append_row(payload)
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ ‚Äî –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ")
            logger.info(f"Recorded message from {user_id} / {username}")
            await try_flush_queue(queue, gsheet_client)
        except Exception:
            logger.exception("Failed to write to Google Sheets, saving to queue")
            queue.push(payload)
            await message.answer("–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ üïì")

    # -----------------------------
    # –ö–æ–º–∞–Ω–¥–∞ /whoami
    # -----------------------------
    @dp.message(Command("whoami"))
    async def cmd_whoami(message: types.Message):
        user = message.from_user
        await message.answer(
            f"–í–∞—à Telegram ID: {user.id}\nUsername: @{user.username}"
            if user.username
            else f"–í–∞—à Telegram ID: {user.id}\n(Username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
        )

    # -----------------------------
    # –ö–æ–º–∞–Ω–¥–∞ /status
    # -----------------------------
    @dp.message(Command("status"))
    async def cmd_status(message: types.Message):
        if message.from_user.id not in auth.ids and message.from_user.username not in auth.usernames:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        conn = sqlite3.connect(queue.db_path)
        cur = conn.cursor()
        cur.execute('SELECT COUNT(*) FROM queue WHERE status IN ("queued","processing")')
        count = cur.fetchone()[0]
        conn.close()

        await message.answer(f"Bot status: OK\nQueued items: {count}")
